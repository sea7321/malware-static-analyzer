import argparse
import logging

from colorama import init
from termcolor import colored

import functions


def get_file_properties(filename):
    """
    Retrieves basic file properties from a portable executable file including
    creation and modification dates, file size, and mime type.
    :param filename: the portable executable filename
    :return: None
    """
    file_creation_date = functions.get_file_creation_date(filename)
    file_modification_date = functions.get_file_modification_date(filename)
    file_size = functions.get_file_size(filename)
    # mime_type = functions.get_mime_type(filename)

    print(colored("[*] Retrieving file properties...", "green"))
    print("\tFile Creation Date: " + file_creation_date)
    print("\tFile Modification Date: " + file_modification_date)
    print("\tFile Size: {} bytes\n".format(file_size))


def get_file_data(filename):
    """
    Retrieves common data from the file including ip addresses, urls, and emails.
    :param filename: the portable executable filename
    :return: None
    """
    # ip_addresses = functions.get_ip_addresses(filename)
    # urls = functions.get_urls(filename)
    # emails = functions.get_emails(filename)


def check_suspicious_activity(filename):
    """
    Checks for suspicious activity within the file such as
    api calls or dll functions.
    :param filename: the portable executable filename
    :return:
    """
    # api_calls = functions.get_api_calls(filename)
    dll_functions = functions.get_dll_functions(filename)

    # print(colored("[*] Listing API calls...", "green"))
    # if api_calls:
    #     for api_call in api_calls:
    #         print("\t{}\n".format(api_call))
    # else:
    #     print("\tNo Found API calls\n")

    print(colored("[*] Listing imported DLLs...", "green"))
    if dll_functions:
        for function in dll_functions:
            print("\t{}\n".format(function))
    else:
        print("\tNo imported DLLs\n")


def check_anti_virtual(filename):
    """
    Checks for anti-virtualization features within the file such as
    if it is packed or is checking for debug functions.
    :param filename: the portable executable filename
    :return: None
    """
    packed = functions.is_packed(filename)
    # anti_debug_functions = functions.get_anti_debug_functions(filename)

    print(colored("[*] Checking for anti-virtualization features...", "green"))
    print("\tPacked: {}".format(packed))


def main():
    """
    The main program module for static analyzer.
    :return: None
    """
    # parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--filename", type=str, required=True, help="executable filename to analyze")
    parser.add_argument("-v", "--verbose", dest="verbosity", action="count", default=0,
                        help="verbosity level between 0-4 (CRITICAL=0, ERROR=1, WARN=2, INFO=3, "
                             "DEBUG=4)")
    args = parser.parse_args()

    # set up logging
    log_levels = {0: logging.CRITICAL, 1: logging.ERROR, 2: logging.WARN, 3: logging.INFO, 4: logging.DEBUG}
    logging.basicConfig(level=log_levels[args.verbosity])

    # initialize colorama
    init()

    # gather important file properties
    get_file_properties(args.filename)

    # gather file usage properties
    get_file_data(args.filename)

    # check for suspicious activity
    check_suspicious_activity(args.filename)

    # check for anti-virtualization features
    check_anti_virtual(args.filename)


if __name__ == "__main__":
    main()
