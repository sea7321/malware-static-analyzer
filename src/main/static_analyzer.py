import argparse
import logging

from colorama import init
from termcolor import colored

import functions


def get_file_properties(filename):
    """
    Retrieves basic file properties from a portable executable file including
    creation and modification dates, file size, and mime type.
    :param filename: the portable executable filename
    :return: None
    """
    file_creation_date = functions.get_file_creation_date(filename)
    file_modification_date = functions.get_file_modification_date(filename)
    file_size = functions.get_file_size(filename)

    print(colored("[*] Retrieving file properties...", "green"))
    print("\tFile Creation Date: " + file_creation_date)
    print("\tFile Modification Date: " + file_modification_date)
    print("\tFile Size: {} bytes".format(file_size))


def check_suspicious_activity(filename):
    """
    Checks for suspicious activity within the file such as
    api calls or dll functions.
    :param filename: the portable executable filename
    :return:
    """
    dll_functions = functions.get_dll_functions(filename)
    function_calls = functions.get_function_calls(filename)[0]
    suspicious_function_calls = functions.get_function_calls(filename)[1]

    print(colored("\n[*] Listing imported DLLs...", "green"))
    if dll_functions:
        for function in dll_functions:
            print("\t{}".format(function))
    else:
        print("\tNo imported DLLs")

    print(colored("\n[*] Listing function calls...", "green"))
    if function_calls:
        for function_call in function_calls:
            if function_call in suspicious_function_calls:
                print(colored("\t{}".format(function_call), "yellow"))
            else:
                print("\t{}".format(function_call))
    else:
        print("\tNo function calls")

    if suspicious_function_calls:
        print(colored("\n\tFound {} suspicious function calls".format(len(suspicious_function_calls)), "yellow"))
    else:
        print(colored("\n\tFound no suspicious function calls", "green"))


def check_anti_virtual(filename):
    """
    Checks for anti-virtualization features within the file such as
    if it is packed or is checking for debug functions.
    :param filename: the portable executable filename
    :return: None
    """
    packed = functions.is_packed(filename)
    anti_debug_functions = functions.get_anti_debug_functions(filename)

    print(colored("\n[*] Checking for anti-virtualization features...", "green"))
    print("\tPacked: {}".format(packed))

    if anti_debug_functions:
        print("\tAnti-Debug Functions: {}".format(len(anti_debug_functions)))
    else:
        print("\tAnti-Debug Functions: None")


def yara_checks(filename):
    print(colored("\n[*] Checking for cryptographic algorithms using Yara...", "green"))
    yara_result = functions.yara_check_crypto(filename)
    if yara_result:
        for item in yara_result:
            print("\t{}".format(item))
    else:
        print("No cryptographic algorithms found")

    print(colored("\n[*] Checking for packed malware using Yara...", "green"))
    yara_result = functions.yara_check_is_packed(filename)
    if yara_result:
        for item in yara_result:
            print("\t{}".format(item))
    else:
        print("No packed malware found")

    print(colored("\n[*] Checking for anti-virtualization functions using Yara...", "green"))
    yara_result = functions.yara_check_anti_virtual(filename)
    if yara_result:
        for item in yara_result:
            print("\t{}".format(item))
    else:
        print("No anti-virtualization functions found")


def main():
    """
    The main program module for static analyzer.
    :return: None
    """
    # parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--filename", type=str, required=True, help="executable filename to analyze")
    parser.add_argument("-v", "--verbose", dest="verbosity", action="count", default=0,
                        help="verbosity level between 0-4 (CRITICAL=0, ERROR=1, WARN=2, INFO=3, "
                             "DEBUG=4)")
    args = parser.parse_args()

    # set up logging
    log_levels = {0: logging.CRITICAL, 1: logging.ERROR, 2: logging.WARN, 3: logging.INFO, 4: logging.DEBUG}
    logging.basicConfig(level=log_levels[args.verbosity])

    # initialize colorama
    init()

    # gather important file properties
    get_file_properties(args.filename)

    # check for suspicious activity
    check_suspicious_activity(args.filename)

    # check for anti-virtualization features
    check_anti_virtual(args.filename)

    # check for suspicious activity using Yara
    yara_checks(args.filename)


if __name__ == "__main__":
    main()
