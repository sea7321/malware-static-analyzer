#
# File Properties Functions
#
import datetime
import os

import pefile
import peutils
import yara


def get_file_path(filename):
    return os.path.abspath(filename)


def get_file_creation_date(filename):
    return datetime.datetime.fromtimestamp(os.path.getctime(filename)).strftime("%m-%d-%Y %H:%M:%S")


def get_file_modification_date(filename):
    return datetime.datetime.fromtimestamp(os.path.getmtime(filename)).strftime("%m-%d-%Y %H:%M:%S")


def get_file_size(filename):
    return os.path.getsize(filename)


#
# Suspicious Activity Functions
#
def get_function_calls(filename):
    suspicious_functions = ['RegSetValueEx', 'RegCreateKeyEx', 'RegEnumKeyEx', 'RegQueryValueEx', 'RegOpenKeyEx',
                            'RegCloseKey', 'RegEnumValue', 'CreateProcess', 'GetCurrentProcess', 'GetCurrentProcessID',
                            'CreateThread', 'SetThreadPriority', 'GetThreadPriority', 'GetProcessTimes', 'ExitProcess',
                            'GetFileVersionInfo', 'GetFileVersionInfoSize', 'GetSystemMetrics', 'GetSystemInfo',
                            'GetNativeSystemInfo', 'QueryPerformanceCounter', 'DeleteFile', 'GetFileType', 'MoveFile',
                            'GetFileAttributes', 'CopyFile', 'FindFirstFileEx', 'GetFileSize', 'ReadFile',
                            'EnableWindow', 'GetAsyncKeyState', 'CryptDeriveKey', 'CryptEncrypt', 'CryptDecrypt',
                            'CryptCreateHash', 'CryptHashData', 'HttpQueryInfo', 'HttpSendRequestEx', 'HttpEndRequest',
                            'HttpOpenRequest', 'InternetConnectA', 'InternetGetConnectedState', 'InternetSetOptionA',
                            'InternetWriteFile', 'InternetCrackUrlA', 'InternetSetStatusCallbackA']
    function_calls = list()
    suspicious_function_calls = list()

    try:
        pe = pefile.PE(filename)
        if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                for function_call in entry.imports:
                    function_calls.append(
                        "{} at 0x{}".format(function_call.name.decode('utf-8'), function_call.address))

                    if function_call.name.decode('utf-8') in suspicious_functions:
                        suspicious_function_calls.append("{} at 0x{}".format(function_call.name.decode('utf-8'),
                                                                             function_call.address))
    except Exception:
        raise Exception("Error listing function calls within {}".format(filename))

    return function_calls, suspicious_function_calls


def get_dll_functions(filename):
    functions = list()

    try:
        pe = pefile.PE(filename)
        if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                functions.append(entry.dll.decode('utf-8'))
    except Exception:
        raise Exception("Error listing imported DLL functions within {}".format(filename))

    return functions


#
# Anti-Virtualization Functions
#
def is_packed(filename):
    # variables
    packed = False
    pe_instance = pefile.PE(filename)

    # check to see if the file is packed
    if peutils.is_probably_packed(pe_instance):
        packed = True
    return packed


def get_anti_debug_functions(filename):
    anti_debug_functions = ['IsDebuggerPresent', 'CheckRemoteDebuggerPresent']
    functions = list()

    try:
        pe = pefile.PE(filename)
        if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                for function in entry.imports:
                    if function.name in anti_debug_functions:
                        functions.append("{} at 0x{}".format(function.name, function.address))
        else:
            raise Exception("No 'DIRECTORY_ENTRY_IMPORT' section file {}".format(filename))
    except Exception:
        raise Exception("Error while checking for anti-debug functions in {}".format(filename))

    return functions


#
# Yara Checks
#
def yara_check_crypto(filename):
    yara_rule_file = "/yara_rules/crypto_signatures.yar"
    rule = yara.compile(yara_rule_file)
    return rule.match(filename)


def yara_check_is_packed(filename):
    yara_rule_file = "/yara_rules/packer.yar"
    rule = yara.compile(yara_rule_file)
    return rule.match(filename)


def yara_check_anti_virtual(filename):
    yara_rule_file = "/yara_rules/antidebug_antivm.yar"
    rule = yara.compile(yara_rule_file)
    return rule.match(filename)
