#
# File Properties Functions
#
import datetime
import os
import re

import pefile
import peutils


def get_file_path(filename):
    return os.path.abspath(filename)


def get_file_creation_date(filename):
    return datetime.datetime.fromtimestamp(os.path.getctime(filename)).strftime("%m-%d-%Y %H:%M:%S")


def get_file_modification_date(filename):
    return datetime.datetime.fromtimestamp(os.path.getmtime(filename)).strftime("%m-%d-%Y %H:%M:%S")


def get_file_size(filename):
    return os.path.getsize(filename)


def get_mime_type(filename):
    None


#
# File Data Functions
#
def get_ip_addresses(filename):
    # variables
    ip_addresses = list()
    regex = r"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"

    # find all IP addresses within the file
    try:
        with open(filename, 'r') as file:
            matches = re.findall(regex, file.read())
            for ip_address in matches:
                if ip_address not in ip_addresses:
                    ip_addresses.append(ip_address)
    except Exception:
        raise Exception("Error finding IP addresses within {}".format(filename))
    return ip_addresses


def get_urls(filename):
    # variables
    urls = list()
    regex = r"(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))" \
            r"*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\".,<>?«»“”‘’]))"

    # find all URLs within the file
    try:
        with open(filename, 'r') as file:
            matches = re.findall(regex, file.read())
            for url in matches:
                if url not in urls:
                    urls.append(url)
    except Exception:
        raise Exception("Error finding URLs within {}".format(filename))
    return urls


def get_emails(filename):
    # variables
    emails = list()
    regex = r"\S+@\S+"

    # find all email addresses within the file
    try:
        with open(filename, 'r') as file:
            matches = re.findall(regex, file.read())
            for email in matches:
                if email not in emails:
                    emails.append(email)
    except Exception:
        raise Exception("Error finding email addresses within {}".format(filename))
    return emails


#
# Suspicious Activity Functions
#
def get_api_calls(filename):
    suspicious_api_calls = ['']
    api_calls = list()


def get_dll_functions(filename):
    functions = list()

    try:
        pe = pefile.PE(filename)
        if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                functions.append(entry.dll.decode('utf-8'))
    except Exception:
        raise Exception("Error listing imported DLL functions within {}".format(filename))

    return functions


#
# Anti-Virtualization Functions
#
def is_packed(filename):
    # variables
    packed = False
    pe_instance = pefile.PE(filename)

    # check to see if the file is packed
    if peutils.is_probably_packed(pe_instance):
        packed = True
    return packed


def get_anti_debug_functions(filename):
    anti_debug_functions = ['']
    functions = list()

    try:
        pe = pefile.PE(filename)
        if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                for function in entry.imports:
                    if function.name in anti_debug_functions:
                        functions.append("{} {}".format(function.address, function.name))
        else:
            raise Exception("No 'DIRECTORY_ENTRY_IMPORT' section file {}".format(filename))
    except Exception:
        raise Exception("Error while checking for anti-debug functions in {}".format(filename))

